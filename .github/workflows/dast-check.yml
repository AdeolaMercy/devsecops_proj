name: Dast Scan

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  dast-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Docker network
        run: |
          docker network create zapnet || true

      - name: Start Juice Shop container
        run: |
          docker run -d --name juice --network zapnet -p 3000:3000 bkimminich/juice-shop
          # Wait for app to be healthy (try up to 60s)
          for i in {1..30}; do
            if curl -sSf http://localhost:3000 | grep -q "OWASP Juice Shop"; then
              echo "Juice Shop is up"
              break
            fi
            echo "Waiting for app..."
            sleep 2
          done

      - name: Run ZAP baseline scan (fast check)
        run: |
          mkdir -p zap-reports
          chmod 777 zap-reports
          docker run --rm --network zapnet -v ${{ github.workspace }}/zap-reports:/zap/wrk ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://juice:3000 -r /zap/wrk/baseline.html -J /zap/wrk/baseline.json

      - name: Upload baseline report
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: zap-reports/baseline.html

      - name: Run ZAP full active scan (optional, longer)
        run: |
          mkdir -p zap-reports
          chmod 777 zap-reports
          docker run --rm --network zapnet -v ${{ github.workspace }}/zap-reports:/zap/wrk ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t http://juice:3000 -r fullscan.html -J fullscan.json || true
          # note: allow non-zero so we can parse results and upload artifacts

      - name: Upload fullscan report
        uses: actions/upload-artifact@v4
        with:
          name: zap-fullscan-report
          path: zap-reports/fullscan.html

      - name: Evaluate results and fail if HIGH/CRITICAL found
        env:
          THRESHOLD_HIGH: 0   # fail if more than this number of HIGH alerts
          THRESHOLD_CRITICAL: 0
        run: |
          set -e
          # prefer fullscan json if exists, else baseline
          if [ -f zap-reports/fullscan.json ]; then
            JSON=zap-reports/fullscan.json
          else
            JSON=zap-reports/baseline.json
          fi

          echo "Parsing $JSON"
          if [ ! -s "$JSON" ]; then
            echo "No JSON report found or file empty: $JSON"
            exit 1
          fi

          # ZAP JSON structure: an array under "site" or Results/Vulnerabilities depending on version.
          # Try to count alerts by riskLevel or severity.
          HIGH_COUNT=$(jq '[.. | objects | .alerts? // empty | .[]? | select(.risk == "High" or .risk == "HIGH" or .risk == "high")] | length' $JSON)
          CRIT_COUNT=$(jq '[.. | objects | .alerts? // empty | .[]? | select(.risk == "Critical" or .risk == "CRITICAL" or .risk == "critical")] | length' $JSON)

          # Fallback: some ZAP JSONs use "alert" objects with "riskcode"
          if [ "$HIGH_COUNT" -eq 0 ] && [ "$CRIT_COUNT" -eq 0 ]; then
            HIGH_COUNT=$(jq '[.site[]?.alerts[]? | select(.risk == "High" or .severity == "HIGH" or .severity == "High" or .riskcode==3)] | length' $JSON 2>/dev/null || echo 0)
            CRIT_COUNT=$(jq '[.site[]?.alerts[]? | select(.risk == "Critical" or .severity == "CRITICAL" or .severity == "Critical" or .riskcode==4)] | length' $JSON 2>/dev/null || echo 0)
          fi

          echo "HIGH_COUNT=$HIGH_COUNT"
          echo "CRIT_COUNT=$CRIT_COUNT"

          if [ "$HIGH_COUNT" -gt "$THRESHOLD_HIGH" ] || [ "$CRIT_COUNT" -gt "$THRESHOLD_CRITICAL" ]; then
            echo "❌ Failing because HIGH/CRITICAL alerts threshold exceeded."
            exit 1
          else
            echo "✅ DAST checks OK"
          fi

      - name: Cleanup containers
        if: always()
        run: |
          docker rm -f juice || true
          docker network rm zapnet || true
